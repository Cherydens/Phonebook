{"version":3,"file":"static/js/8.9834dd23.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/Commons/Button.styled.jsx","redux/filter/selectors.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  gap: 16px;\n  padding: 8px;\n  border: 1px solid gray;\n  margin-bottom: 16px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  gap: 4px;\n`;\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  padding: 2px 10px;\n  border: 1px solid gray;\n  border-radius: 5px;\n  cursor: pointer;\n  background-color: transparent;\n  text-transform: capitalize;\n\n  &:active {\n    background-color: blue;\n    color: white;\n  }\n`;\n","export const selectFilter = state => state.filter.filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useState } from 'react';\nimport { Form, FormLabel } from './ContactForm.styled';\nimport { Button } from 'components/Commons/Button.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        console.warn(`There is no input: ${name}!`);\n    }\n  };\n\n  const checkInContacts = name =>\n    contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase());\n\n  const createContact = data => {\n    const { name } = data;\n    if (checkInContacts(name)) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact(data));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    createContact({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormLabel>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </FormLabel>\n\n      <FormLabel>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </FormLabel>\n\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactListItem } from './ContactItem.styled';\nimport { Button } from 'components/Commons/Button.styled';\n\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  const onDeleteContact = () => {\n    dispatch(deleteContact(id));\n  };\n\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <ContactListItem>\n      <p>\n        {name}: {number}\n      </p>\n      <Button onClick={onDeleteContact} disabled={isLoading}>\n        Delete\n      </Button>\n    </ContactListItem>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.objectOf(PropTypes.string).isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Contacts = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n`;\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport { Contacts } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <Contacts>\n      {contacts.length > 0 &&\n        contacts.map(contact => (\n          <ContactItem key={contact.id} contact={contact} />\n        ))}\n    </Contacts>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n  padding-top: 12px;\n  padding-bottom: 12px;\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  gap: 4px;\n`;\n","import { setFilter } from 'redux/filter/slice';\nimport { FilterLabel } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const Filter = () => {\n  const { filter } = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleSetFilter = e => {\n    const value = e.target.value;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <FilterLabel>\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleSetFilter}\n      />\n    </FilterLabel>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","FormLabel","Button","selectFilter","state","filter","selectContacts","contacts","items","selectIsLoading","isLoading","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","e","target","value","console","warn","createContact","data","some","checkInContacts","addContact","alert","reset","onSubmit","preventDefault","type","onChange","pattern","title","required","ContactListItem","ContactItem","id","onClick","deleteContact","disabled","Contacts","ContactList","length","map","FilterLabel","Filter","setFilter","useEffect","fetchContacts"],"sourceRoot":""}